import requests
import re
from bs4 import BeautifulSoup

def get_group_schedule(group):
    url = 'https://rksi.ru/schedule'

    r_post = requests.post(url, {'group': '–ò–°-34', "stt": "–ü–æ–∫–∞–∑–∞—Ç—å!"})
    soup = BeautifulSoup(r_post.text, features="lxml")

    rasp_row = soup.find('main')
    rasp_lst = rasp_row.find_all(['p', 'hr'])[2:]
    rasp_lst = [str(i) for i in rasp_lst]

    lst = [i.get_text() for i in soup.find_all(['p', 'b'])[2:-1]]
    
    result = separation_text(lst=lst, rasp_lst=rasp_lst)
    return result


def get_teacher_schedule(teacher):
    url = 'https://rksi.ru/schedule'

    r_post = requests.post(url, {'teacher': teacher, "stp": "–ü–æ–∫–∞–∑–∞—Ç—å!"})
    soup = BeautifulSoup(r_post.text, features="lxml")

    rasp_row = soup.find('main')
    rasp_lst = rasp_row.find_all(['p', 'hr'])[2:]
    rasp_lst = [str(i) for i in rasp_lst]

    lst = [i.get_text() for i in soup.find_all(['p', 'b'])[2:-1]]

    result = separation_text(lst=lst, rasp_lst=rasp_lst)
    return result


def separation_text(lst, rasp_lst):
    # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞
    words_to_check = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']
    date_lst = [item for item in lst if any(word in item for word in words_to_check)]

    # —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
    pattern1 = re.compile(r'(\d{2}:\d{2})\s+‚Äî\s+(\d{2}:\d{2})<br/><b>(.+?)</b><br/>(.+?), –∞—É–¥\. (\d+-\d+)')
    pattern2 = re.compile(r'(\d{2}:\d{2})\s+‚Äî\s+(\d{2}:\d{2})<br/><b>(.+?)</b><br/>(.+?), –∞—É–¥\. (—Å/–∑\d+-\d+)')
    pattern3 = re.compile(r'(\d{2}:\d{2})\s+‚Äî\s+(\d{2}:\d{2})<br/><b>(.+?)</b><br/>(.+?), –∞—É–¥\. (\d+–∞-\d+)')

    patterns = [pattern1, pattern2, pattern3]
    result = []

    for date in range(len(date_lst)):
        day_schedule = []
        day_schedule.append(date_lst[date])
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ –¥–∞—Ç—É, –≤—Ä–µ–º—è, –ø—Ä–µ–¥–º–µ—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        for i, item in enumerate(rasp_lst):
            matched = False
            for pattern in patterns:
                match = pattern.search(item)
                if match:
                    start_time, end_time, subject, people, classroom = match.groups()
                    day_schedule.append({
                        '–í—Ä–µ–º—è': f"{start_time} ‚Äî {end_time}",
                        '–ü—Ä–µ–¥–º–µ—Ç': subject,
                        '–û–±—â–Ω–æ—Å—Ç—å': people,
                        '–ê—É–¥–∏—Ç–æ—Ä–∏—è': classroom
                    })
                    matched = True
                    break
            if not matched: 
                del rasp_lst[0:i+1]
                break
        result.append(day_schedule)
    return result



# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
group_schedule = get_group_schedule(input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: '))
for day_schedule in group_schedule:
    print('‚Äî' * 10)
    print('üìÖ', day_schedule[0])
    print('‚Äî' * 10)

    for lesson in day_schedule[1:]:
        print(f"‚è≥: {lesson['–í—Ä–µ–º—è']}")
        print(f"üìí: {lesson['–ü—Ä–µ–¥–º–µ—Ç']}")
        print(f"üéì: {lesson['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}")
        print(f"üîë: {lesson['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}", '\n')


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–ö–∞–ª–∞–º–±–µ—Ç –í.–ë.)
group_schedule = get_teacher_schedule(input('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: '))
for day_schedule in group_schedule:
    print('‚Äî' * 10)
    print('üìÖ', day_schedule[0])
    print('‚Äî' * 10)

    for lesson in day_schedule[1:]:
        print(f"‚è≥: {lesson['–í—Ä–µ–º—è']}")
        print(f"üìí: {lesson['–ü—Ä–µ–¥–º–µ—Ç']}")
        print(f"üéì: {lesson['–û–±—â–Ω–æ—Å—Ç—å']}")
        print(f"üîë: {lesson['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}", '\n')
